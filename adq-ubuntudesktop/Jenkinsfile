pipeline {
    agent {
        label 'docker'
    }
    environment {
        GCP_CREDENTIALS = credentials('SVC_JSON_DEV')
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    // Checkout from Git repository
                    git branch: 'main', url: 'https://github.com/bpurnachander/get-ubuntudesktop-iac.git'
                    
                    // Set build name and description
                    currentBuild.displayName = "${ENV} - #${env.BUILD_NUMBER}"
                    currentBuild.description = """\
TERRAFORM: ${TERRAFORM}
TERRAFORM_EXTRA_ARGS: ${TERRAFORM_EXTRA_ARGS}
ANSIBLE: ${ANSIBLE}
ANSIBLE_EXTRA_ARGS: ${ANSIBLE_EXTRA_ARGS}
"""
                }
            }
        }
        stage('Initial Check') {
            steps {
                script {
                    if (terraform == 'skip' && ANSIBLE == 'skip') {
                        error('Both Terraform and Ansible stages are set to skip. Aborting the build.')
                    }
                }
            }
        }
        stage('Get credentials') {
            when {
                expression {
                    return terraform in ['skip', 'apply']
                }
            }
            steps {
                script {
                    
                    def destPath = "${env.WORKSPACE}/service-account.json"

                    // Write the secret file to the destination path on the agent
                    writeFile file: destPath, text: new String(readFile(env.GCP_CREDENTIALS).bytes)

                    sh """
                    sudo cp ${env.WORKSPACE}/adq-ubuntudesktop/ansible/ansible.cfg /etc/ansible/ansible.cfg
                    """
                }
            }
        }
        stage('terraform_plan') {
            when {
                expression {
                    return terraform in ['plan', 'apply']
                }
            }
            steps {
                dir("./adq-ubuntudesktop/terraform/environments/${ENV}") {
                    
                    sh """
                    
                    terraform init
                    terraform plan ${TERRAFORM_EXTRA_ARGS}
                    
                    """
                }
            }
        }
        stage('Check and Apply Terraform') {
            when {
                expression {
                    return terraform == 'apply'
                }
            }
            steps {
                dir("./adq-ubuntudesktop/terraform/environments/${ENV}") {
                    script {
                        def tfState = sh(script: """
                            terraform state list
                    """, returnStdout: true).trim()

                        if (tfState) {
                            echo 'Existing Terraform state found.'
                            def userInput = input message: 'Existing resources found. Do you want to recreate the infrastructure?', ok: 'Apply', parameters: [choice(name: 'Confirm', choices: 'yes\nno', description: 'Choose yes to recreate or no to abort')]

                            if (userInput == 'yes') {
                                
                                sh """
                                
                                terraform init
                                terraform apply --auto-approve ${TERRAFORM_EXTRA_ARGS}
                                
                                """
                            } else {
                                echo 'Aborted by user.'
                                currentBuild.result = 'ABORTED'
                                error('User chose not to recreate infrastructure.')
                            }
                        } else {
                            echo 'No existing resources found. Applying Terraform.'
                            
                            sh """
                            
                            terraform init
                            terraform apply --auto-approve ${TERRAFORM_EXTRA_ARGS}
                            
                            """
                        }
                    }
                }
            }
        }
        stage('terraform_destroy') {
            when {
                expression {
                    return terraform == 'destroy'
                }
            }
            steps {
                dir("./adq-ubuntudesktop/terraform/environments/${ENV}") {
                    
                    script {
                        input message: 'Are you sure you want to destroy the infrastructure?', ok: 'Yes'
                    }
                    
                    sh """
                    
                    terraform init
                    terraform destroy --auto-approve ${TERRAFORM_EXTRA_ARGS}
                    
                    """
                }
            }
        }
        stage('Playbook_apply') {
            when {
                expression {
                    return ANSIBLE == 'apply'
                }
            }
            steps {
                script {
                    try {
                        sleep(time: 30, unit: 'SECONDS')
                        dir("./adq-ubuntudesktop/ansible/") {
                            sh """
                            ansible --version
                            ansible-inventory --graph -i environments/$ENV
                            ansible-playbook -i environments/$ENV main.yaml "${ANSIBLE_EXTRA_ARGS}"
                            """
                        }
                        echo 'Playbook executed successfully.'
                    } catch (Exception e) {
                        echo 'Playbook execution failed.'
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }

        stage('Playbook_destroy') {
            when {
                expression {
                    return ANSIBLE == 'destroy'
                }
            }
            steps {
                script {
                    try {
                        dir("./adq-ubuntudesktop/ansible/") {
                            sh """
                            ansible-playbook -i environments/$ENV main.yaml -e "${ANSIBLE_EXTRA_ARGS}"
                            """
                        }
                        echo 'Playbook executed successfully in destroy stage.'
                    } catch (Exception e) {
                        echo 'Playbook execution failed in destroy stage.'
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
    }
}
