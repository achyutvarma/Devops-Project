pipeline {
    agent {
        label 'docker'
    }
    environment {
        GCP_CREDENTIALS = credentials('svc-json')
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/bpurnachander/get-ubuntudesktop-iac.git'
            }
        }
        stage('Get credentials') {
            when {
                expression {
                    return tfm_action in ['---', 'skip', 'apply']
                }
            }
            steps {
                script {
                    if (ansible_action == 'skip') {
                        echo 'Stage skipped because ansible_action is skip'
                        return
                    } else {
                        // Define the path where the GCP credentials will be copied on the slave agent
                        def destPath = '/var/lib/jenkins/workspace/desktop/adq-ubuntu-desktop/ansible/service-account.json'

                        // Write the secret file to the destination path on the slave agent
                        writeFile file: destPath, text: new String(readFile(env.GCP_CREDENTIALS).bytes)
                    
                        sh """
                        sudo cp /var/lib/jenkins/workspace/desktop/adq-ubuntu-desktop/ansible/ansible.cfg /etc/ansible/ansible.cfg
                        """
                    }
                }
            }
        }
        stage('tfm_init') {
            when {
                expression {
                    return tfm_action in ['init', 'plan', 'apply', 'destroy']
                }
            }
            steps {
                sh """
                cd /var/lib/jenkins/workspace/desktop/adq-ubuntu-desktop/terraform/environments/$ENV
                terraform init
                """
            }
        }
        stage('tfm_plan') {
            when {
                expression {
                    return tfm_action in ['plan', 'apply']
                }
            }
            steps {
                script  {
                    if (tfm_action == 'skip') {
                        error('Stage aborted because tfm_action is skip')
                    } else {
                        sh """
                        cd /var/lib/jenkins/workspace/desktop/adq-ubuntu-desktop/terraform/environments/$ENV
                        terraform plan --var-file="terraform.tfvars"
                        """
                    }
                }
            }
        }
        stage('Check Existing Resources') {
            when {
                expression {
                    return tfm_action == 'apply'
                }
            }
            steps {
                script {
                    def tfState = sh(script: '''
                        cd /var/lib/jenkins/workspace/desktop/adq-ubuntu-desktop/terraform/environments/$ENV
                        terraform state list
                    ''', returnStdout: true).trim()

                    if (tfState) {
                        echo 'Existing Terraform state found.'
                        env.TF_STATE_EXISTS = 'true'
                    } else {
                        echo 'No existing Terraform state found.'
                        env.TF_STATE_EXISTS = 'false'
                    }
                    echo "TF_STATE_EXISTS: ${env.TF_STATE_EXISTS}"
                }
            }
        }
        stage('tfm_apply') {
            when {
                expression {
                    return tfm_action == 'apply' && env.TF_STATE_EXISTS == 'false'
                }
            }
            steps {
                sh """
                cd /var/lib/jenkins/workspace/desktop/adq-ubuntu-desktop/terraform/environments/$ENV
                terraform apply --auto-approve --var-file="terraform.tfvars"
                """
            }
        }
        stage('tfm_destroy') {
            when {
                expression {
                    return tfm_action == 'destroy'
                }
            }
            steps {
                script {
                    input message: 'Are you sure you want to destroy the infrastructure?', ok: 'Yes'
                }
                sh """
                cd /var/lib/jenkins/workspace/desktop/adq-ubuntu-desktop/terraform/environments/$ENV
                terraform destroy --auto-approve --var-file="terraform.tfvars"
                """
            }
        }
        stage('Recreate_infra') {
            when {
                expression {
                    return env.TF_STATE_EXISTS == 'true'
                }
            }
            steps {
                script {
                    input message: 'Are you sure you want to recreate the infrastructure?', ok: 'Yes'
                }
                sh """
                cd /var/lib/jenkins/workspace/desktop/adq-ubuntu-desktop/terraform/environments/$ENV
                terraform apply --auto-approve --var-file="terraform.tfvars"
                """
            }
        }
        stage('Playbook-apply'){
             when {
                expression {
                    return tfm_action in ['---', 'skip', 'apply'] && ansible_action == 'apply' && upgrade_software == '---'
                }
            }
            steps {
                script {
                    def software_list = ['desktop', 'tomcat', 'python', 'java']
                    if (software == 'all') {
                        
                        for (def software_name in software_list) {
                            echo "Executing Ansible playbook for ${software_name}"
                            sh """
                            ansible-playbook -e "ansible_hosts=$ansible_hosts software=${software_name} python_version=$python_version java_version=$java_version tomcat_base_version=$tomcat_base_version tomcat_version=$tomcat_version operation=apply" adq-ubuntu-desktop/ansible/master.yaml
                            """
                        }
                    } else {
                        
                        sleep(time: 30, unit: 'SECONDS')
                        sh """
                        ansible-playbook -e "ansible_hosts=$ansible_hosts software=$software python_version=$python_version java_version=$java_version tomcat_base_version=$tomcat_base_version tomcat_version=$tomcat_version operation=apply" adq-ubuntu-desktop/ansible/master.yaml
                        """
                    }
                }
            }
        }
        stage('Playbook-destroy'){
             when {
                expression {
                    return tfm_action in ['---', 'skip'] && ansible_action == 'destroy'
                }
            }
            steps {
                sh """
                ansible-playbook -e "ansible_hosts=$ansible_hosts software=$software python_version=$python_version java_version=$java_version tomcat_base_version=$tomcat_base_version tomcat_version=$tomcat_version operation=destroy" adq-ubuntu-desktop/ansible/master.yaml
                """
            }
        }
        stage('Upgrade tomcat Version') {
             when {
                expression {
                    return upgrade_software == 'tomcat'
                }
            }
            steps {
                script {
                    def oldVersions = sh(script: "ansible ${ansible_hosts} -m shell -a 'cd /opt/tomcat && ls | grep apache-tomcat'", returnStdout: true).trim()
                    
                    if (oldVersions) {
                        def userInput = input message: "Old Tomcat versions are ${oldVersions}\nDo you want to upgrade your tomcat version to $tomcat_version", ok: 'Yes'
                        
                        sh """
                        ansible-playbook -e "ansible_hosts=$ansible_hosts software=$software python_version=$python_version java_version=$java_version tomcat_base_version=$tomcat_base_version tomcat_version=$tomcat_version operation=apply" adq-ubuntu-desktop/ansible/master.yaml
                        """
                    } else {
                        echo "No old Tomcat versions found."
                
                    }
                }
            }
        }
    }
}
